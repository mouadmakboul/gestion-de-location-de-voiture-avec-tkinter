
        #num_facture_field = Entry(self.root,textvariable = self.id_f)
        #num_facture_field.grid(row = 1,column = 1,ipady = 7,ipadx = 20,padx = 20)
#==============Num etudiant TEXTFIELD AND LABEL

        num_facture_lbl = Label(self.root,text = "num",anchor='w')
        num_facture_lbl.grid(row = 2,column = 0,padx = 40,pady = 40)
        num_facture_field = Entry(self.root,textvariable = self.id_f)
        num_facture_field.grid(row = 2,column = 1,ipady = 7,ipadx = 20,padx = 20)
 #==============Nom etudiant TEXTFIELD AND LABEL
        num_location_lbl = Label(self.root,text = "num location",anchor='w')
        num_location_lbl.grid(row = 3,column = 0,padx = 40,pady = 40)
        num_location_field = Entry(self.root,textvariable = self.id_l)
        num_location_field.grid(row = 3,column = 1,ipady = 7,ipadx = 20,padx = 20)

#=======================Age etudiant LABEL AND TEXTFIELD
        date_fact = Label(self.root,text="date de facture",anchor='w')
        date_fact.grid(row = 4,column = 0,pady = 40)
        date_fact= DateEntry(self.root, width=12, background='darkblue',  
        foreground='white', borderwidth=2, year=1950,locale='en_US', date_pattern='y-mm-dd',textvariable =self.date_fact)
        date_fact.grid(row = 2,column = 3,ipady = 7,ipadx = 20,padx = 20)
#=======================Age etudiant LABEL AND TEXTFIELD
        date_pai_lbl = Label(self.root,text="date de paiement",anchor='w')
        date_pai_lbl.grid(row = 2,column = 2,pady = 40)
        date_pai= DateEntry(self.root, width=12, background='darkblue',  
        foreground='white', borderwidth=2, year=1950,locale='en_US', date_pattern='y-mm-dd',textvariable =self.date_pai)
        date_pai.grid(row = 2,column = 3,ipady = 7,ipadx = 20,padx = 20)
#=======================Age etudiant LABEL AND TEXTFIELD
        date_pai_lbl = Label(self.root,text="prix de facture",anchor='w')
        date_pai_lbl.grid(row = 3,column = 2,pady = 40)
        date_pai_field = Entry(self.root,textvariable = self.prix_fact)
        date_pai_field.grid(row = 3,column = 3,ipady = 7,ipadx = 20,padx = 20)     
#=====================Boutton ajout
        ajou_location_btn = Button(self.root,text = "Ajouter",command = self.add,anchor='c',bg="blue")
        ajou_location_btn.grid(row = 7,column = 0,ipady = 4,ipadx = 13,pady = 40)
  #=====================Boutton affichage à ajouter après boutton "Ajouter" dans __init()__
        #affich_location_btn = Button(self.root,text = "Afficher",command = self.view,anchor='c')
        #affich_location_btn.grid(row = 7,column = 1,ipady = 4,ipadx = 13,pady = 40)
 #=====================Boutton Supprimer à ajouter après boutton "Afficher" dans __init()__
        supp_location_btn = Button(self.root,text = "Supprimer",command = self.remove,anchor='c',bg="Red")
        supp_location_btn.grid(row = 7,column = 2,ipady = 4,ipadx = 13,pady = 40)
 #=====================Boutton modifier  à ajouter après boutton "Afficher" dans __init()__
        #modif_location_btn = Button(self.root,text = "modifier",command = self.update,anchor='c',bg="green")
        #modif_location_btn.grid(row = 7,column = 1,ipady = 4,ipadx = 13,pady = 40) 
            #=======================Age etudiant LABEL AND TEXTFIELD
        #search_lbl = Label(self.root,text="chercher",anchor='w',bg="light green")
        #search_lbl.grid(row = 7,column = 3,pady = 40)
        search_field = Entry(self.root,textvariable = self.id_l)
        search_field.grid(row = 7,column = 4,ipady = 7,ipadx = 1,padx =1) 
        search_location_btn = Button(self.root,text = "cherche",command = self.view,anchor='c',bg="yellow")
        search_location_btn.grid(row = 7,column = 3,ipady = 3,ipadx = 13,pady = 40)    
 #-----------------afficher table ------------------------------
#Fonction d'ajout d'un étudiant (sera appelée dérière le boutton "Ajouter"
    def add(self):

        f = Facture(self.id_f.get(),self.id_l.get(),self.date_fact.get(),self.date_pai.get(),self.prix_fact.get())
        #print("Location_v: ",E.nom)
        f.AjouterFacture()
    def view(self):
        #self.root.title("Student Management(Details)")
        #==========================Show Frame
        self.root=Tk()
        self.root.geometry('700x300')
        self.root.title("facture")
        show_frame = Frame(self.root)
        show_frame.place(width = 800,x = 0,y = 0 ,height = 300)
        labl_show = Label(show_frame,text = "Affichage des facture")
        labl_show.pack()
        #========================Main Frame
        main_frame = Frame(self.root,bd = 10,relief = SUNKEN)
        main_frame.place(width = 600,height = 200,x = 8,y = 58)
        tree = ttk.Treeview(main_frame,height = 200)
        vsb = ttk.Scrollbar(main_frame,command = tree.yview,orient = "vertical")
        tree.configure(yscroll = vsb.set)
        vsb.pack(side = RIGHT,fill = Y)
        tree.pack(side = TOP,fill = X)
        tree['columns'] = ("1","2","3","4")
        tree.column('#0',width=50)
        tree.column('1',width=80)
        tree.column('2',width=80)
        tree.column('3',width=80)
        tree.column('4',width=80)
        
        tree.heading("#0",text = "num",anchor='c')
        tree.heading("1",text = "num location",anchor='c')
        tree.heading("2",text = "date de facture",anchor='w')
        tree.heading("3",text = "date de paiement",anchor='w')
        tree.heading("4",text = "prix de paiement",anchor='w')
        
        f = Facture()
        rows=f.afficherFacture()
        j=1
        for i in rows:
            tree.insert("","end",text=str(j), values = (f'{i[0]}',f'{i[1]}',f'{i[2]}',f'{i[3]}',f'{i[4]}'))
            j+=1
    def qExit():
            root.destroy()

    

   
 #Fonction dse suppression d'un étudiant sera appelée dans le boutton "Supprimer"  
    def remove(self):
        f = Facture()
        f.supprimerFacture(self.id_f.get())                                
#if __name__ == "__main__":






























from tkinter import *
from implementation_classe import *
import tkinter.ttk as ttk
from tkcalendar import Calendar, DateEntry  
from tkinter import messagebox
class GestionLocation():
    def __init__(self,root):
        self.root = root
        self.root.geometry("800x650+351+174")
        self.root.title("GestionLocation")
        self.id_l=IntVar()
        self.description=StringVar()
        self.date_debut=StringVar()
        self.date_fin=StringVar()
        self.prix_loc=DoubleVar()
        root.config(bg='light green')

        
        #title_lbl = Label(self.root,text = "num",anchor='w',bg="light green")
        #title_lbl.grid(row = 1,column = 0,padx = 40,pady = 40)
        title_location_lbl = Label(self.root,text = "agence location",anchor='w',bg="light green")
        title_location_lbl.grid(row = 1,column = 0,padx = 40,pady = 40)
       # num_location_field = Entry(self.root,textvariable = self.id_l)
        #num_location_field.grid(row = 1,column = 1,ipady = 7,ipadx = 20,padx = 20)
#==============Num etudiant TEXTFIELD AND LABEL
        
        num_location_lbl = Label(self.root,text = "num",anchor='w',bg="light green")
        num_location_lbl.grid(row = 2,column = 0,padx = 40,pady = 40)
        num_location_field = Entry(self.root,textvariable = self.id_l)
        num_location_field.grid(row = 2,column = 1,ipady = 7,ipadx = 20,padx = 20)
     
 #==============Nom etudiant TEXTFIELD AND LABEL
        description_location_lbl = Label(self.root,text = "description",anchor='w',bg="light green")
        description_location_lbl.grid(row = 3,column = 0,padx = 40,pady = 40)
        description_location_field = Entry(self.root,textvariable = self.description)
        description_location_field.grid(row = 3,column = 1,ipady = 7,ipadx = 20,padx = 20)

#=======================Age etudiant LABEL AND TEXTFIELD
        date_debut = Label(self.root,text="date debut",anchor='w',bg="light green")
        date_debut.grid(row = 4,column = 0,pady = 40)
        date_debut_field = DateEntry(self.root, width=12, background='darkblue',  
        foreground='white', borderwidth=2, year=1950,locale='en_US', date_pattern='y-mm-dd',textvariable =self.date_debut)
        date_debut_field.grid(row = 4,column = 1,ipady = 7,ipadx = 20,padx = 20)
#=======================Age etudiant LABEL AND TEXTFIELD
        date_fin_lbl = Label(self.root,text="date fin",anchor='w',bg="light green")
        date_fin_lbl.grid(row = 2,column = 2,pady = 40)
        #calDB=DateEntry(self.root,width=12,background='darkblue',foreground='white',borderwidth=2,year=1950,locale='en_US',date_pattern='y-mm-dd')
        calDOB = DateEntry(self.root, width=12, background='darkblue',  
        foreground='white', borderwidth=2, year=1950,locale='en_US', date_pattern='y-mm-dd',textvariable =self.date_fin)
        calDOB.grid(row = 2,column = 3,ipady = 7,ipadx = 20,padx = 20)
#=======================Age etudiant LABEL AND TEXTFIELD
        prix_lbl = Label(self.root,text="prix",anchor='w',bg="light green")
        prix_lbl.grid(row = 3,column = 2,pady = 40)
        prix_field = Entry(self.root,textvariable = self.prix_loc)
        prix_field.grid(row = 3,column = 3,ipady = 7,ipadx = 20,padx = 20)    
#--------------------------------------------------
             
#=====================Boutton ajout
        ajou_location_btn = Button(self.root,text = "Ajouter",command = self.add,anchor='c',bg="blue")
        ajou_location_btn.grid(row = 7,column = 0,ipady = 4,ipadx = 13,pady = 40)
  #=====================Boutton affichage à ajouter après boutton "Ajouter" dans __init()__
        #affich_location_btn = Button(self.root,text = "Afficher",command = self.view,anchor='c')
        #affich_location_btn.grid(row = 7,column = 1,ipady = 4,ipadx = 13,pady = 40)
 #=====================Boutton Supprimer à ajouter après boutton "Afficher" dans __init()__
        supp_location_btn = Button(self.root,text = "Supprimer",command = self.remove,anchor='c',bg="Red")
        supp_location_btn.grid(row = 7,column = 2,ipady = 4,ipadx = 13,pady = 40)
 #=====================Boutton modifier  à ajouter après boutton "Afficher" dans __init()__
        modif_location_btn = Button(self.root,text = "modifier",command = self.update,anchor='c',bg="green")
        modif_location_btn.grid(row = 7,column = 1,ipady = 4,ipadx = 13,pady = 40) 
            #=======================Age etudiant LABEL AND TEXTFIELD
        #search_lbl = Label(self.root,text="chercher",anchor='w',bg="light green")
        #search_lbl.grid(row = 7,column = 3,pady = 40)
        search_field = Entry(self.root,textvariable = self.id_l)
        search_field.grid(row = 7,column = 4,ipady = 7,ipadx = 1,padx =1) 
        search_location_btn = Button(self.root,text = "cherche",command = self.view,anchor='c',bg="yellow")
        search_location_btn.grid(row = 7,column = 3,ipady = 3,ipadx = 13,pady = 40)    
 #-----------------afficher table ------------------------------


        #show_frame = Frame(self.root)
        #show_frame.place(width = 400,x = 0,y = 0 ,height = 300)
        #labl_show = Label(show_frame,text = "Affichage des locations")
        #labl_show = Label(text = "Affichage des locations")
        
        #labl_show.pack()
        #========================Main Frame
        
       
        main_frame = Frame(self.root,bd = 10,relief = SUNKEN,bg="green")
        main_frame.place(width = 800,height = 150,x = 10,y = 500)
        tree = ttk.Treeview(main_frame,height = 200)
        vsb = ttk.Scrollbar(main_frame,command = tree.yview,orient = "vertical")
        tree.configure(yscroll = vsb.set)
        vsb.pack(side = RIGHT,fill = Y)
        tree.pack(side = TOP,fill = X)
        tree['columns'] = ("1","2","3","4","5")
        tree.column('#0',width=50)
        tree.column('1',width=50)
        tree.column('2',width=80)
        tree.column('3',width=80)
        tree.column('4',width=80)
        tree.column('5',width=80)
        
        tree.heading("#0",text = "num",anchor='c')
        tree.heading("1",text = "id location",anchor='c')
        
        tree.heading("2",text = "description",anchor='c')
        tree.heading("3",text = "date debut",anchor='w')
        tree.heading("4",text = "date fin",anchor='w')
        tree.heading("5",text="prix",anchor='w')
        L = Location_v()
        rows=L.afficherLocation_v()
        j=1
        for i in rows:
            tree.insert("","end",text=str(j), values = (f'{i[0]}',f'{i[1]}',f'{i[2]}',f'{i[3]}',f'{i[4]}'))
            j+=1      
#Fonction d'ajout d'un étudiant (sera appelée dérière le boutton "Ajouter"
    def add(self):

        L = Location_v(self.id_l.get(),self.description.get(),self.date_debut.get(),self.date_fin.get(),self.prix_loc.get())
        #print("Location_v: ",E.nom)
        L.AjouterLocation_v()
    def view(self):
        #self.root.title("Student Management(Details)")
        #==========================Show Frame
        self.root=Tk()
        self.root.geometry('700x300')
        self.root.title("location voiture")
        show_frame = Frame(self.root)
        show_frame.place(width = 800,x = 0,y = 0 ,height = 300)
        labl_show = Label(show_frame,text = "Affichage des locations")
        labl_show.pack()
        #========================Main Frame
        main_frame = Frame(self.root,bd = 10,relief = SUNKEN)
        main_frame.place(width = 600,height = 200,x = 8,y = 58)
        tree = ttk.Treeview(main_frame,height = 200)
        vsb = ttk.Scrollbar(main_frame,command = tree.yview,orient = "vertical")
        tree.configure(yscroll = vsb.set)
        vsb.pack(side = RIGHT,fill = Y)
        tree.pack(side = TOP,fill = X)
        tree['columns'] = ("1","2","3","4","5")
        tree.column('#0',width=50)

        tree.column('1',width=80)
        tree.column('2',width=80)
        tree.column('3',width=80)
        tree.column('4',width=80)
        tree.column('5',width=80)

        tree.heading("#0",text = "num",anchor='c')
        tree.heading("1",text="id",anchor='w')
        tree.heading("2",text = "description",anchor='c')
        tree.heading("3",text = "date debut",anchor='w')
        tree.heading("4",text = "date fin",anchor='w')
        tree.heading("5",text="prix",anchor='w')
        
        L = Location_v()
        rows=L.chercher(self.id_l.get())
        
       # rows=L.afficherLocation_v()
        j=1
        
        for i in rows:
            tree.insert("","end",text=str(j), values = (f'{i[0]}',f'{i[1]}',f'{i[2]}',f'{i[3]}',f'{i[4]}'))
            #j+=1

 #Fonction dse suppression d'un étudiant sera appelée dans le boutton "Supprimer"  
    def remove(self):
        reponse = messagebox.askyesno("Question", "Voulez-vous Supprimer ?")
        if reponse ==True:
            L = Location_v()
            L.supprimerLocation(self.id_l.get()) 
       
               
         
    def update (self):
        reponse = messagebox.askyesnocancel("Question", "Voulez-vous continuer ?")
        if reponse == True:
            L = Location_v()
            L.modifierLocation(self.id_l.get(),self.description.get(),self.date_debut.get(),self.date_fin.get(),self.prix_loc.get())                 
                                      
#if __name__ == "__main__":
root = Tk()
l = GestionLocation(root)
root.mainloop()